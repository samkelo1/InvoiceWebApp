// <auto-generated />
using System;
using InvoiceWebApp.Components.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InvoiceWebApp.Migrations
{
    [DbContext(typeof(InvoiceContext))]
    [Migration("20230208191644_initcreate")]
    partial class initcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.Address", b =>
                {
                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("VARCHAR(40)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("Suffix")
                        .HasColumnType("VARCHAR(10)");

                    b.HasKey("Number", "PostalCode");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.Debtor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("LastName")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("debtors", (string)null);
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.DebtorHasAddress", b =>
                {
                    b.Property<string>("DebtorId")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("VARCHAR(40)");

                    b.Property<int>("Number")
                        .HasColumnType("INT");

                    b.HasKey("DebtorId", "PostalCode", "Number");

                    b.HasIndex("Number", "PostalCode");

                    b.ToTable("debtor_has_addresses", (string)null);
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.Invoice", b =>
                {
                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Comment")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<bool>("Concept")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("Discount")
                        .HasColumnType("INT")
                        .HasColumnName("discount");

                    b.Property<DateTime>("ExpiredOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal")
                        .HasColumnName("total");

                    b.HasKey("InvoiceNumber");

                    b.HasIndex("CustomerId");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("ItemNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemNumber"));

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Tax")
                        .HasColumnType("int");

                    b.HasKey("ItemNumber", "InvoiceNumber");

                    b.HasIndex("InvoiceNumber");

                    b.ToTable("invoice_items", (string)null);
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("BusinessNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("color");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(300)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("InvoicePrefix")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("logo");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.Property<string>("Phone")
                        .HasColumnType("VARCHAR(40)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("SMTP")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.Property<bool>("ShowLogo")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowLogoInPDF")
                        .HasColumnType("bit");

                    b.Property<string>("VAT")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("Website")
                        .HasColumnType("VARCHAR(300)");

                    b.HasKey("Id");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("FirstName")
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("LastName")
                        .HasColumnType("VARCHAR(175)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("picture");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.DebtorHasAddress", b =>
                {
                    b.HasOne("InvoiceWebApp.Components.Entities.Debtor", "Debtor")
                        .WithMany("Addresses")
                        .HasForeignKey("DebtorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dha_debtor_fk");

                    b.HasOne("InvoiceWebApp.Components.Entities.Address", "Address")
                        .WithMany("Debtors")
                        .HasForeignKey("Number", "PostalCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dha_address_fk");

                    b.Navigation("Address");

                    b.Navigation("Debtor");
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.Invoice", b =>
                {
                    b.HasOne("InvoiceWebApp.Components.Entities.Debtor", "Debtor")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("invoices_debtors_fk");

                    b.Navigation("Debtor");
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.InvoiceItem", b =>
                {
                    b.HasOne("InvoiceWebApp.Components.Entities.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("items_invoice_fk");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.Address", b =>
                {
                    b.Navigation("Debtors");
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.Debtor", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("InvoiceWebApp.Components.Entities.Invoice", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
